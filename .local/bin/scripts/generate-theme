#!/bin/sh

# generate theme configurations
# TODO: overhaul macros and use a preprocessor instead of sed

# theme select menu
chtheme() {
    test -z "$1" && return 1
    printf "\n\033[1mApplying which theme?\033[22m\n" >&2
    itmc="$#"
    for itm in "$@"; do
        itmc="$((itmc-1))"
        printf "\033[1m[\033[36m%s\033[39m]\033[22m " "$(($#-itmc))" >&2
        printf "$(sed -n '2s/^#\\e\(\[38;2;[0-9]\+;[0-9]\+;[0-9]\+m\)\\e\(\[48;2;[0-9]\+;[0-9]\+;[0-9]\+m\)$/\x1B\1\x1B\2/p' <"$itm/theme.conf" 2>/dev/null)" >&2
        printf "%s\033[0m\n" "${itm##*/}" >&2
    done
    while true; do
        printf "\033[1mEnter your choice [\033[36m1\033[39m-\033[36m$#\033[39m]\033[22m " >&2
        read inum
        test "$inum" -gt "0" -a "$inum" -le "$#" >&- 2>&- && break
    done
    eval "printf \"\${$inum##*/}\""
}

# we need sed
for c in find sed; do
    test -z "$(command -v "$c")" && printf "$c: command not found\n" >&2 && exit 127
done

# look for themes in here
themedir="${XDG_CONFIG_HOME:-$HOME/.config}/themes"

# get name of theme from $1
test -r "$themedir${1:+/$1/}theme.conf" && theme="$1"

# or pick one
IFS="$(printf "\n\t")"
test -z "$theme" && theme="$(chtheme $(find "$themedir" -mindepth 1 -type d 2>/dev/null))"
test -z "$theme" && theme="$(chtheme $(for d in "$themedir"/* "$themedir"/*/*; do test -d "$d" && printf "%s\n" "$d"; done))"
IFS="$(printf " \n\t")"

# source theme file
. "$themedir/$theme/theme.conf" || exit "$?"

# generate theme-specific config files from templates
for f in $(find "${XDG_CONFIG_HOME:-$HOME/.config}" "${XDG_DATA_HOME:-$HOME/.local/share}" -type f | sed -n '/\/\.\?___/p'); do
    dir="${f%/*}"
    name="${f##*/}"
    test "${name#.}" != "$name" && name=".${name##.___}" || name="${name##___}"

    # substitution for fonts, colors, vim colorschemes, and directories
    sed \
        -e "s/#::font-monospace::#/${theme_font_monospace:-monospace}/g" \
        -e "s/#::font-serif::#/${theme_font_serif:-serif}/g" \
        -e "s/#::font-sans-serif::#/${theme_font_sans_serif:-sans-serif}/g" \
        -e "s/#::vim-colorscheme::#/${theme_vim_colorscheme:-default}/g" \
        -e "s/#::vim-transparency::#/${theme_vim_transparency:-false}/g" \
        -e "s/#::rootbg::#/$theme_rootbg/g" \
        -e "s/#::darkbg::#/$theme_darkbg/g" \
        -e "s/#::mainbg::#/$theme_mainbg/g" \
        -e "s/#::mainbg2::#/$theme_mainbg2/g" \
        -e "s/#::statusbg::#/$theme_statusbg/g" \
        -e "s/#::statusbg2::#/$theme_statusbg2/g" \
        -e "s/#::brightbg::#/$theme_brightbg/g" \
        -e "s/#::brightbg2::#/$theme_brightbg2/g" \
        -e "s/#::brighterbg::#/$theme_brighterbg/g" \
        -e "s/#::brighterbg2::#/$theme_brighterbg2/g" \
        -e "s/#::brightestbg::#/$theme_brightestbg/g" \
        -e "s/#::brightestbg2::#/$theme_brightestbg2/g" \
        -e "s/#::darkerfg::#/$theme_darkerfg/g" \
        -e "s/#::darkfg::#/$theme_darkfg/g" \
        -e "s/#::mainfg::#/$theme_mainfg/g" \
        -e "s/#::brightfg::#/$theme_brightfg/g" \
        -e "s/#::darkred::#/$theme_darkred/g" \
        -e "s/#::mainred::#/$theme_mainred/g" \
        -e "s/#::brightred::#/$theme_brightred/g" \
        -e "s/#::darkgreen::#/$theme_darkgreen/g" \
        -e "s/#::maingreen::#/$theme_maingreen/g" \
        -e "s/#::brightgreen::#/$theme_brightgreen/g" \
        -e "s/#::darkyellow::#/$theme_darkyellow/g" \
        -e "s/#::mainyellow::#/$theme_mainyellow/g" \
        -e "s/#::brightyellow::#/$theme_brightyellow/g" \
        -e "s/#::darkorange::#/$theme_darkorange/g" \
        -e "s/#::mainorange::#/$theme_mainorange/g" \
        -e "s/#::brightorange::#/$theme_brightorange/g" \
        -e "s/#::darkblue::#/$theme_darkblue/g" \
        -e "s/#::mainblue::#/$theme_mainblue/g" \
        -e "s/#::brightblue::#/$theme_brightblue/g" \
        -e "s/#::darkmagenta::#/$theme_darkmagenta/g" \
        -e "s/#::mainmagenta::#/$theme_mainmagenta/g" \
        -e "s/#::brightmagenta::#/$theme_brightmagenta/g" \
        -e "s/#::darkcyan::#/$theme_darkcyan/g" \
        -e "s/#::maincyan::#/$theme_maincyan/g" \
        -e "s/#::brightcyan::#/$theme_brightcyan/g" \
        -e "s%#::configdir::#%${XDG_CONFIG_HOME:-$HOME/.config}%g" \
        -e "s%#::datadir::#%${XDG_DATA_HOME:-$HOME/.local/share}%g" \
        -e "s%#::statedir::#%${XDG_DATA_HOME:-$HOME/.local/state}%g" \
        -e "s%#::cachedir::#%${XDG_CACHE_HOME:-$HOME/.cache}%g" \
        -e "s%#::docdir::#%${XDG_DOCUMENTS_DIR:-$HOME/Documents}%g" \
        -e "s%#::dldir::#%${XDG_DOWNLOAD_DIR:-$HOME/Downloads}%g" \
        -e "s%#::musicdir::#%${XDG_MUSIC_DIR:-$HOME/Music}%g" \
        -e "s%#::picdir::#%${XDG_PICTURES_DIR:-$HOME/Pictures}%g" \
        -e "s%#::videodir::#%${XDG_VIDEOS_DIR:-$HOME/Videos}%g" \
    <"$f" >"$dir/$name"
done

# reload theme if we can
test -n "$(command -v reload-theme)" && reload-theme
