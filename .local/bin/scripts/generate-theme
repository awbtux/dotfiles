#!/bin/sh

# generate theme configurations
# TODO: overhaul macros and use a preprocessor instead of sed

# load shell functions
[ -r "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions" ] && . "${XDG_CONFIG_HOME:-$HOME/.config}/shell/functions"

# we need these
require-cmd find sed chmenu || exit 127

# get name of theme from $1
[ -r "${XDG_DATA_HOME:-$HOME/.local/share}/dots/themes/${1:+$1/}theme.conf" ] && . "${XDG_DATA_HOME:-$HOME/.local/share}/dots/themes/${1:+$1/}theme.conf"

# get name of theme from interactive input
[ ! -r "${XDG_DATA_HOME:-$HOME/.local/share}/dots/themes/${1:+$1/}theme.conf" ] && {
    # get a list of themes
    tchoices="$(for i in $(find "${XDG_DATA_HOME:-$HOME/.local/share}/dots/themes/" -type d -not -path "${XDG_DATA_HOME:-$HOME/.local/share}/dots/themes/"); do test -d "$i" || continue; printf "$i\t"; done)"

    # choose the theme
    OLDIFS="$IFS"; IFS="$(printf '\t')"; tchoice="$(chmenu -t -b 'Applying which theme?' $tchoices)"; IFS="$OLDIFS"

    # apply it if possible
    test ! -r "$tchoice/theme.conf" && printf "${0##*/}: error: $tchoice/theme.conf: No such file or directory" && exit 1
    . "$tchoice/theme.conf"
}

# generate theme-specific config files from templates
for i in $(find "${XDG_CONFIG_HOME:-$HOME/.config}" "${XDG_DATA_HOME:-$HOME/.local/share}" -type f -name '___*') $(find "${XDG_CONFIG_HOME:-$HOME/.config}" "${XDG_DATA_HOME:-$HOME/.local/share}" -type f -name '.___*'); do
    dir="${i%/*}"
    name="${i##*/}"
    name="${name##___}"
    test "${name#.}" != "$name" && name=".${name##.___}"

    # substitution for fonts, colors, vim colorschemes, and directories
    sed \
        -e "s/#::font-monospace::#/${theme_font_monospace:-monospace}/g" \
        -e "s/#::font-serif::#/${theme_font_serif:-serif}/g" \
        -e "s/#::font-sans-serif::#/${theme_font_sans_serif:-sans-serif}/g" \
        -e "s/#::vim-colorscheme::#/${theme_vim_colorscheme:-default}/g" \
        -e "s/#::vim-transparency::#/${theme_vim_transparency:-false}/g" \
        -e "s/#::rootbg::#/$theme_rootbg/g" \
        -e "s/#::darkbg::#/$theme_darkbg/g" \
        -e "s/#::mainbg::#/$theme_mainbg/g" \
        -e "s/#::mainbg2::#/$theme_mainbg2/g" \
        -e "s/#::statusbg::#/$theme_statusbg/g" \
        -e "s/#::statusbg2::#/$theme_statusbg2/g" \
        -e "s/#::brightbg::#/$theme_brightbg/g" \
        -e "s/#::brightbg2::#/$theme_brightbg2/g" \
        -e "s/#::brighterbg::#/$theme_brighterbg/g" \
        -e "s/#::brighterbg2::#/$theme_brighterbg2/g" \
        -e "s/#::brightestbg::#/$theme_brightestbg/g" \
        -e "s/#::brightestbg2::#/$theme_brightestbg2/g" \
        -e "s/#::darkerfg::#/$theme_darkerfg/g" \
        -e "s/#::darkfg::#/$theme_darkfg/g" \
        -e "s/#::mainfg::#/$theme_mainfg/g" \
        -e "s/#::brightfg::#/$theme_brightfg/g" \
        -e "s/#::darkred::#/$theme_darkred/g" \
        -e "s/#::mainred::#/$theme_mainred/g" \
        -e "s/#::brightred::#/$theme_brightred/g" \
        -e "s/#::darkgreen::#/$theme_darkgreen/g" \
        -e "s/#::maingreen::#/$theme_maingreen/g" \
        -e "s/#::brightgreen::#/$theme_brightgreen/g" \
        -e "s/#::darkyellow::#/$theme_darkyellow/g" \
        -e "s/#::mainyellow::#/$theme_mainyellow/g" \
        -e "s/#::brightyellow::#/$theme_brightyellow/g" \
        -e "s/#::darkorange::#/$theme_darkorange/g" \
        -e "s/#::mainorange::#/$theme_mainorange/g" \
        -e "s/#::brightorange::#/$theme_brightorange/g" \
        -e "s/#::darkblue::#/$theme_darkblue/g" \
        -e "s/#::mainblue::#/$theme_mainblue/g" \
        -e "s/#::brightblue::#/$theme_brightblue/g" \
        -e "s/#::darkmagenta::#/$theme_darkmagenta/g" \
        -e "s/#::mainmagenta::#/$theme_mainmagenta/g" \
        -e "s/#::brightmagenta::#/$theme_brightmagenta/g" \
        -e "s/#::darkcyan::#/$theme_darkcyan/g" \
        -e "s/#::maincyan::#/$theme_maincyan/g" \
        -e "s/#::brightcyan::#/$theme_brightcyan/g" \
        -e "s%#::configdir::#%${XDG_CONFIG_HOME:-$HOME/.config}%g" \
        -e "s%#::datadir::#%${XDG_DATA_HOME:-$HOME/.local/share}%g" \
        -e "s%#::statedir::#%${XDG_DATA_HOME:-$HOME/.local/state}%g" \
        -e "s%#::cachedir::#%${XDG_CACHE_HOME:-$HOME/.cache}%g" \
        -e "s%#::docdir::#%${XDG_DOCUMENTS_DIR:-$HOME/Documents}%g" \
        -e "s%#::dldir::#%${XDG_DOWNLOAD_DIR:-$HOME/Downloads}%g" \
        -e "s%#::musicdir::#%${XDG_MUSIC_DIR:-$HOME/Music}%g" \
        -e "s%#::picdir::#%${XDG_PICTURES_DIR:-$HOME/Pictures}%g" \
        -e "s%#::videodir::#%${XDG_VIDEOS_DIR:-$HOME/Videos}%g" \
    <"$i" >"$dir/$name"
done

# reload the font cache if the command to do so is provided
command -v fc-cache >/dev/null 2>&1 && fc-cache

# reload waybar
command -v waybar >/dev/null 2>&1 && pidof waybar >/dev/null 2>&1 && command -v setsid >/dev/null 2>&1 && test -n "$WAYLAND_DISPLAY" && pkill waybar && setsid -f waybar >/dev/null 2>&1

# reload river theme if riverwm is active
command -v riverctl >/dev/null 2>&1 && pidof river >/dev/null 2>&1 && test -n "$WAYLAND_DISPLAY" && sh "${XDG_CONFIG_HOME:-$HOME/.config}/river/theme" >/dev/null
