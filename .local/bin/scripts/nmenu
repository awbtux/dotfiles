#!/bin/sh
#

# print a numbered menu and allow the user to choose between its items

# handle signals
for i in HUP INT QUIT ABRT KILL SEGV TERM STOP TSTP PWR; do
    eval "trap '{
        printf \"\n${0##*/}: recieved signal $i\n\"
        exit 1
    }' $i"
done

# parse arguments
while [ "$#" -gt 0 ]; do
    case "$1" in
        # treat options as absolute paths and strip directory parts
        -b|--basenames) do_basenames="y"; shift ;;

        # obscure, i need it
        -t|-tp|--theme|--theme-preview) do_themes="y"; shift ;;

        # print a prefix before each option
        -p|--prefix) print_prefix="$2"; shift 2 ;;
        -p*)         print_prefix="${1##-p}"; shift ;;
        --prefix=*)  print_prefix="${1##--prefix=}"; shift ;;

        # print a suffix after each option
        -s|--suffix) print_suffix="$2"; shift 2 ;;
        -s*)         print_suffix="${1##-s}"; shift ;;
        --suffix=*)  print_suffix="${1##--suffix=}"; shift ;;

        # end option parsing
        *) break ;;
    esac
done

# title is required
[ -n "$1" ] && {
    title="$1"
} || {
    printf "${0##*/}: error: No menu title provided\n"
    exit 1
}

# we don't need the title arg anymore, shift past it
shift

# if no items are provided, exit
[ -n "$1" ] || {
    printf "${0##*/}: error: No menu items provided\n"
    exit 1
}

# print a title
printf "\033[1m$title\033[22m\n" >&2

# initialize itm to 0
itmc="0"

# create list entries for each subsequent argument
while [ "$#" -gt 0 ]; do
    itmc=$((itmc+1))
    eval "itm$itmc=\"$1\""

    # strip path elements if applicable
    [ "$do_basenames" = "y" ] && {
          test "$(eval printf "\"\${itm$itmc##*/}\"" | wc -c)" -gt "${arglen:-0}" &&
        arglen="$(eval printf "\"\${itm$itmc##*/}\"" | wc -c)"
    } || {
          test "$(eval printf "\"\$itm$itmc\"" | wc -c)" -gt "${arglen:-0}" &&
        arglen="$(eval printf "\"\$itm$itmc\"" | wc -c)"
    }

    shift
done

# we might not need it; if we do, do what needs to be done
[ -n "$arglen" ] && [ -n "$print_suffix" ] && optlen="-$arglen"

# print each choice provided in arguments
for i in $(seq 1 $itmc); do
    itmcol=""
    eval "item=\"\$itm$i\""

    # do tha thang
    [ -r "$item/theme.conf" ] && {
        itmcol="$(sed -n '2s/#//p' <"$item/theme.conf")"
    }

    # decide whether to color the item
    case "$item" in
        [yY]|[yY][eE][sS]|[tT]|[tT][rR][uU][eE])     itmcol="\033[1;32m" ;;
            [nN]|[nN][oO]|[fF]|[fF][aA][lL][sS][eE]) itmcol="\033[1;31m" ;;
    esac

    # strip path elements if applicable
    [ "$do_basenames" = "y" ] && item="${item##*/}"

    # print the menu item and its ID
    #eval "printf \"\033[1m[\033[36m%s\033[39m]\033[0m $itmcol%s\033[0m\" \"$itm\" \"$item\"" >&2
    printf -- "\033[1m[\033[36m%s\033[39m]\033[0m $itmcol%${optlen}s\033[0m" "$i" "$print_prefix$item$print_suffix" >&2

    # print a newline
    printf "\n" >&2
done

# read the user's choice
while true; do
    # print the prompt
    printf "\033[1mEnter your choice [\033[36m1\033[39m-\033[36m$i\033[39m]\033[22m " >&2

    # read input
    read inum

    # if the user's input is a number between 1 and the number of menu items, break the loop
    [ $inum -gt 0 >&- 2>&- ] && {
        [ $inum -le $itmc >&- 2>&- ] && break
    }

    # this loop will continue until it recieves a valid number
done

# print the item the user chose
eval "printf \"\$itm$inum\""
