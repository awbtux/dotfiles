#
# variables
#
set anchorfind false
set autoquit true
set cursorpreviewfmt "\0"
set cursoractivefmt "\033[7m"
set cursorparentfmt "\033[7m"
set dircache true
set dircounts false
set dirfirst true
set drawbox false
set dupfilefmt "%b%e~%n"
set filesep "\n"
set findlen 1
set hidden false
set history false
set icons true
set ifs "\n"
set incsearch true
set ignorecase true
set ignoredia true
set info time:size
set infotimefmtnew '1/2/06 03:04 PM'
set infotimefmtold '1/2/06 03:04 PM'
set mouse false
set number false
set numberfmt "\033[90m"
set period 5
set preserve "mode:timestamps"
set preview true
set relativenumber true
set scrolloff 8
set shellopts '-eu'
set sixel true
set smartcase true
set smartdia true
set tabstop 4
set timefmt '01-02-2006 03:04:05 PM'
set truncatechar "~"
set waitmsg "\n\033[2mpress any key to continue.\033[0m "
set wrapscan true
set wrapscroll true

#
# external scripts
#
set previewer "~/.config/lf/previewer"
set cleaner "~/.config/lf/cleaner"

#
# commands
#
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        text/*|application/json|inode/x-empty|application/x-subrip) $EDITOR $fx;;
        audio/*|video/x-ms-asf) mpv --audio-display=no $f ;;
        video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
        application/pgp-encrypted) $EDITOR $fx ;;
        *) for f in $fx; do setsid xdg-open $f >/dev/null 2>&1 & done ;;
    esac
}}

cmd mkdir $mkdir -p "$@"

cmd extract ${{
    set -f
    printf "\033[1m"
    printf "%s\n\t" "$fx"
    printf "extract? [y/N]\033[0m "
    read ans
    [ $ans = "y" ] && {
        case $fx in
            *.tar.bz2) tar xjf $fx     ;;
            *.tar.gz)  tar xzf $fx     ;;
            *.bz2)     bunzip2 $fx     ;;
            *.gz)      gunzip $fx      ;;
            *.tar)     tar xf $fx      ;;
            *.tbz2)    tar xjf $fx     ;;
            *.tgz)     tar xzf $fx     ;;
            *.zip)     unzip $fx       ;;
            *.Z)       uncompress $fx  ;;
            *.7z)      7z x $fx        ;;
            *.tar.xz)  tar xf $fx      ;;
        esac
    }
}}

cmd delete ${{
    set -f
    printf "\033[1m"
    printf "%s\n\t" "$fx"
    printf "delete? [y/N]\033[0m "
    read ans
    [ $ans = "y" ] && rm -rf -- $fx
}}

cmd set-wallpaper "$1"

cmd bulkrename ${{
    tmpfile_old="$(mktemp)"
    tmpfile_new="$(mktemp)"

    [ -n "$fs" ] && fs=$(basename -a $fs) || fs=$(ls)

    echo "$fs" > "$tmpfile_old"
    echo "$fs" > "$tmpfile_new"

    $EDITOR "$tmpfile_new"

    [ "$(wc -l < "$tmpfile_old")" -eq "$(wc -l < "$tmpfile_new")" ] || { rm -f "$tmpfile_old" "$tmpfile_new"; exit 1; }

    paste "$tmpfile_old" "$tmpfile_new" | while IFS="$(printf '\t')" read -r src dst
    do
        [ "$src" = "$dst" ] || [ -e "$dst" ] || mv -- "$src" "$dst"
    done

    rm -f "$tmpfile_old" "$tmpfile_new"
    lf -remote "send $id unselect"
}}

cmd toggleexecbit ${{
    set -f
    for f in $fx; do
        oldperm="$(stat $f -c '%a')"
        case $oldperm in
            1*|3*|7*) chmod -x $f ;;
            0*|2*|6*) chmod +x $f ;;
        esac
    done
    lf -remote "send $id reload"
}}

cmd selectall :unselect; invert

#
# bindings
#
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map <c-e> down
map <c-y> up
map <c-a> selectall
map q quit
map gh
map H cd ~
map R cd /
map g top
map v calcdirsize
map C toggleexecbit "$f"
map D delete
map E extract
map <c-n> push :mkdir<space>""<left>
map <c-r> reload
map <enter> shell
map x $$f
map X !$f
map o &mimeopen "$f"
map O $mimeopen --ask "$f"
map A :rename; cmd-end # at the very end
map I :rename; cmd-home # at the very beginning
map i :rename # before extension
map a :rename; cmd-right # after extension
map B bulkrename
map b $set-wallpaper $f
map V push :!nvim<space>$fx
map Y $printf "%s" "$fx" | clipboard-copy
