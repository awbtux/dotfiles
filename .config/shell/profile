#!/bin/sh

# supported shells: bash, dash, ksh, ksh93, mksh, oksh, yash, zsh

# ---------------------------------------- Part 0: Function ----------------------------------------

# 'source' and '.' do the same thing
command -v . >/dev/null 2>&1 || eval "alias .='source' 2>/dev/null"
command -v source >/dev/null 2>&1 || eval "alias source='.' 2>/dev/null"

# rudimentary 'unset' for shells that don't have it
command -v unset >/dev/null 2>&1 || eval 'unset() {
    for _k in "$@"; do
        eval "$_k="
        eval "$_k() { return 127; }"
    done; _k=""
}'

# rudimentary 'local' for shells that don't have it
command -v local >/dev/null 2>&1 || eval 'local() {
    for _kv in "$@"; do
        eval "${_kv%%=*}=\"\${_kv##${_kv%%=*}=}\""
    done; unset _kv
}'

# rudimentary 'seq' for environments that don't have it
command -v seq >/dev/null 2>&1 || seq() {
    start="$1"
    while [ "$start" -gt "${2:-$1}" ]; do
        printf "%s\n" "$start"; start="$((start-1))"
    done
    while [ "$start" -le "${2:-$1}" ]; do
        printf "%s\n" "$start"; start="$((start+1))"
    done
    unset start
}

# rudimentary 'which' for environments that don't have it
command -v which >/dev/null 2>&1 || which() {
    IFS=":"
    for dir in $PATH; do
        test -x "$dir/$1" && printf "%s\n" "$dir/$1" && unset dir && return 0
    done
    IFS="$(printf ' \t\n')"
    unset dir
    return 1
}

# rudimentary 'cat' for environments that don't have it
command -v cat >/dev/null 2>&1 || cat() {
    for i in "$@"; do
        while IFS="" read -r line; do
            printf "%s\n" "$line"
        done <"$i"
    done
    unset line
}

# rudimentary 'realpath' implementation for environments that don't have it
command -v readlink >/dev/null 2>&1 && ! command -v realpath >/dev/null 2>&1 && realpath() {
    readlink -f "$@"
}

# get the current shell
whichsh() {
    SHNAME=""
    SHNAME="${ZSH_ARGZERO:-$0}"
    SHNAME="${SHNAME##-}"
    SHNAME="${SHNAME##*/}"

    command -v realpath >/dev/null 2>&1 && SHNAME="$(realpath "$(which "${SHNAME:-$SHELL}")")"
    SHNAME="${SHNAME##*/}"

    # print the shell name
    printf "%s\n" "$SHNAME"
}

# function add directories to our path
pathadd() {
    case ":$PATH:" in
        *:"$1":*) ;;
        *) test -d "$1" && export PATH="$1${PATH:+:$PATH}" ;;
    esac
}

# respawn a new shell &/or terminal if applicable
respawn() {
    test -n "${WAYLAND_DISPLAY:-$DISPLAY}" && exec "$(whichsh)" -c "setsid -f xdg-terminal-exec & sleep 0.1" || exec "$(whichsh)"
}

# --------------------------------------- Part 1: Run always ---------------------------------------

# basic xdg directory definitions - rest in ~/.config/shell/scripts/01-env.sh
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CACHE_HOME="$HOME/.local/cache"

# add cargo & npm packages to path
export CARGO_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/cargo"
export NPM_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/node"

# add more directories to the path
pathadd "/home/linuxbrew/.linuxbrew/bin"
pathadd "${NPM_HOME:-${XDG_DATA_HOME:-$HOME/.local/share}/node}/node_modules/.bin"
pathadd "$HOME/.nix-profile/bin"
pathadd "${CARGO_HOME:-${XDG_DATA_HOME:-$HOME/.local/share}/cargo}/bin"
pathadd "$HOME/.local/bin"

# find subdirs recursively in ~/.local/bin/scripts
command -v find >/dev/null 2>&1 && for i in $(find $HOME/.local/bin -type d); do
    pathadd "$i"
done || for i in "$HOME/.local/bin"/*/ "$HOME/.local/bin"/*/*/ "$HOME/.local/bin"/*/*/*/; do
    test -d "$i" && pathadd "$i"
done

# other users/group members can't write to user files
umask 022

# current shell's name
export SHNAME="$(whichsh)"

# determine the shell init file based on the name of the shell
[ -r "${XDG_CONFIG_HOME:-$HOME/.config}/shell/${SHNAME}rc" ] && {
    export ENV="${XDG_CONFIG_HOME:-$HOME/.config}/shell/${SHNAME}rc"
} || {
    export ENV="${XDG_CONFIG_HOME:-$HOME/.config}/shell/shrc"
}

# set to prevent this from getting sourced more than once in the same environment
USERPROFILE_CURRENT="y"

# source everything in ~/.config/shell/scripts/
for i in ${XDG_CONFIG_HOME:-$HOME/.config}/shell/scripts/*.sh; do
    [ -r "$i" ] && . "$i"
done

# ------------------------------ Part 2: Run in interactive sessions -------------------------------

# if our session is interactive, source the shell init file and scripts
case "$-" in
    *i*) for i in ${XDG_CONFIG_HOME:-$HOME/.config}/shell/scripts/interactive/*.sh; do
             [ -r "$i" ] && . "$i"
         done ;;
      *) ;;
esac

# end execution here
case "$USERPROFILE" in
    "") export USERPROFILE="y";;
     *) return 0 ;;
esac


# ---------------------------------------- Part 3: Run once ----------------------------------------

# source everything in ~/.config/shell/scripts/run-once/
for i in ${XDG_CONFIG_HOME:-$HOME/.config}/shell/scripts/once/*.sh; do
    [ -r "$i" ] && . "$i"
done

# if our session isn't interactive, return with success and finish execution
case "$-" in
    *i*) ;;
      *) return 0 ;;
esac


# ------------------------- Part 4: Run once, when in an interactive shell -------------------------

# source everything in ~/.config/shell/scripts/once/interactive/
for i in ${XDG_CONFIG_HOME:-$HOME/.config}/shell/scripts/once/interactive/*.sh; do
    [ -r "$i" ] && . "$i"
done

# if our session isn't a login shell, return with success and finish execution
case "$-" in
    *l*) ;;
      *) return 0 ;;
esac


# ---------------------------- Part 5: Run once, when in a login shell -----------------------------

# store the login shell pid
export LOGIN_PID="$$"

# when logging out, execute everything in ~/.config/shell/scripts/logout and kill sessions
trap '{
    for i in ${XDG_CONFIG_HOME:-$HOME/.config}/shell/scripts/logout/*.sh; do
        [ -r "$i" ] && . "$i"
    done
}' 0

# execute everything in ~/.config/shell/scripts/login
for i in ${XDG_CONFIG_HOME:-$HOME/.config}/shell/scripts/login/*.sh; do
    [ -r "$i" ] && . "$i"
done

# load the shell init file
[ -r "$ENV" ] && . "$ENV"
